#region License
/*********************************************************************************
 * SingleInstanceMainForm.cs
 *
 * Copyright (c) 2004-2019 Henk Nicolai
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *
**********************************************************************************/
#endregion

using System;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace Eutherion.Win.AppTemplate
{
    /// <summary>
    /// Hidden window which uses a mutex file to ensure that at most one instance
    /// of the Windows Forms application is running.
    /// </summary>
    public abstract class SingleInstanceMainForm : Form
    {
        private const int WM_COPYDATA = 0x4A;

        private class SafePinnedByteArray : IDisposable
        {
            private readonly GCHandle gcHandle;

            public IntPtr Pointer { get; }

            public SafePinnedByteArray(byte[] bytes)
            {
                // This means that we don't have to use unsafe code with the 'fixed' keyword, as in:
                // fixed (byte* bytePtr = bytes)
                // {
                //    IntPtr intPtr = (IntPtr)bytePtr;
                // }
                gcHandle = GCHandle.Alloc(bytes, GCHandleType.Pinned);
                Pointer = gcHandle.AddrOfPinnedObject();
            }

            public void Dispose()
            {
                gcHandle.Free();
                GC.SuppressFinalize(this);
            }

            ~SafePinnedByteArray()
            {
                gcHandle.Free();
            }
        }

        private Session session;

        /// <summary>
        /// Called when a handle is created and a <see cref="Session"/> for this
        /// <see cref="SingleInstanceMainForm"/> must be configured.
        /// </summary>
        /// <returns>
        /// The initialized session.
        /// </returns>
        public abstract Session RequestSession();

        /// <summary>
        /// Called when another instance of the application is already running to send a message to it.
        /// This message will be received by <see cref="ReceivedMessageFromAnotherInstance"/> in the
        /// existing instance of the application.
        /// </summary>
        /// <returns>
        /// The message to send.
        /// </returns>
        protected abstract string GetMessageToSendToExistingInstance();

        /// <summary>
        /// Called when a message is received from another instance of the application which has just
        /// been initialized. After this method returns, the other instance of the application exits.
        /// The message was generated by a call to <see cref="GetMessageToSendToExistingInstance"/>
        /// in the other instance of the application.
        /// </summary>
        /// <param name="message">
        /// The message that was received.
        /// </param>
        protected abstract void ReceivedMessageFromAnotherInstance(string message);

        protected bool HasSession => session != null;

        protected override void OnHandleCreated(EventArgs e)
        {
            try
            {
                session = RequestSession();
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message, "Fatal initialization error", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

            base.OnHandleCreated(e);
        }

        protected override void OnHandleDestroyed(EventArgs e)
        {
            base.OnHandleDestroyed(e);
            session?.Dispose();
            session = null;
        }

        internal void NotifyExistingInstance(HandleRef remoteWindowHandle, byte[] remoteExpectedMagic)
        {
            // Send a WM_COPYDATA message to the SingleInstanceMainForm of the existing instance of the application.
            string messageToSendToExistingInstance = GetMessageToSendToExistingInstance();
            byte[] encodedMessage = Encoding.UTF8.GetBytes(messageToSendToExistingInstance);

            // Prefix the message to send with the expected magic.
            byte[] msg = new byte[checked(remoteExpectedMagic.Length + encodedMessage.Length)];
            Array.Copy(remoteExpectedMagic, 0, msg, 0, remoteExpectedMagic.Length);
            Array.Copy(encodedMessage, 0, msg, remoteExpectedMagic.Length, encodedMessage.Length);

            using (var safePinnedMsg = new SafePinnedByteArray(msg))
            {
                COPYDATASTRUCT copyData = default;
                copyData.dwData = IntPtr.Zero;
                copyData.cbData = msg.Length;
                copyData.lpData = safePinnedMsg.Pointer;

                IntPtr copyDataBuffer = Marshal.AllocHGlobal(Marshal.SizeOf(copyData));
                try
                {
                    Marshal.StructureToPtr(copyData, copyDataBuffer, false);

                    // SendMessage only returns when the receiving process has completed the call.
                    WinAPI.SendMessage(remoteWindowHandle, WM_COPYDATA, IntPtr.Zero, copyDataBuffer);

                    int error = Marshal.GetLastWin32Error();
                    if (error != 0) throw new Win32Exception(error);
                }
                finally
                {
                    Marshal.FreeHGlobal(copyDataBuffer);
                }
            }
        }
    }
}
